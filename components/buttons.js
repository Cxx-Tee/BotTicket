const {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ChannelType,
  PermissionsBitField
} = require('discord.js');
const config = require('../config.json');
const { saveLog } = require('../utils/logger');
const { sendTranscript } = require('../utils/transcript');


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å index.js ‡∏´‡∏£‡∏∑‡∏≠ select menu

async function createTicket({ interaction, customId, user, guild }) {
  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô user ‡πÄ‡∏õ‡∏¥‡∏î ticket ‡∏ã‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ other)
  let channel;
  const t0 = Date.now();
  try {
    if (interaction._ticketLock) return;
    interaction._ticketLock = true;
    // ‡∏ï‡πâ‡∏≠‡∏á deferReply ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ lock
    const ephemeralTypes = ["support", "report", "donate"];
    const isEphemeral = ephemeralTypes.includes(customId);
    console.log(`[TICKET] [${user.tag}] about to deferReply at ${new Date().toISOString()}`);
    try {
      await interaction.deferReply({ ephemeral: isEphemeral });
      console.log(`[TICKET] [${user.tag}] deferReply success at ${new Date().toISOString()}`);
    } catch (deferErr) {
      console.error('[TICKET] deferReply error:', deferErr);
      return;
    }

    let already = null;
    let freshChannels = null;
    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å categoryId ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ticket
    const categoryId = (config.categoryId && config.categoryId[customId]) ? config.categoryId[customId] : config.categoryId.support;
    try {
      freshChannels = await guild.channels.fetch();
    } catch (e) {
      console.error('[TICKET] fetch channels error:', e);
    }
    if (freshChannels) {
      already = freshChannels.find(c =>
        c.parentId === categoryId &&
        c.type === ChannelType.GuildText &&
        c.name.startsWith(`ticket-${customId}-`) &&
        c.permissionOverwrites?.cache?.has(user.id)
      );
    }
    if (already) {
      await interaction.editReply({ content: `‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ticket ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: <#${already.id}>` });
      try { if (!user.bot) await user.send(`‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ticket ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: <#${already.id}>`); } catch {}
      return;
    }
    await interaction.editReply({ content: '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ticket...' });
    console.log(`[TICKET] [${user.tag}] no duplicate, start create channel at ${new Date().toISOString()}`);
    const extraRoles = require('../extraRoles');
    const extraRolePerms = (Array.isArray(extraRoles) ? extraRoles : []).map(rid => ({ id: rid, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] }));
    channel = await guild.channels.create({
      name: `ticket-${customId}-${user.username}`,
      type: ChannelType.GuildText,
      parent: categoryId,
      permissionOverwrites: [
        { id: guild.roles.everyone.id, deny: [PermissionsBitField.Flags.ViewChannel] },
        { id: user.id, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] },
        { id: config.adminRoleId, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] },
        { id: config.supportRoleId, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] },
        config.viewerRoleId ? { id: config.viewerRoleId, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages] } : null,
        ...extraRolePerms
      ].filter(Boolean)
    });
    console.log(`[TICKET] [${user.tag}] channel created at ${new Date().toISOString()}`);
  } catch (err) {
    console.error('[TICKET] create channel error:', err);
    try { await interaction.editReply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á ticket ‡πÑ‡∏î‡πâ: ' + err.message }); } catch {}
    return;
  }

  // ‡∏ï‡∏≠‡∏ö interaction user ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏£‡∏≠ DM/notify admin
  try {
    await interaction.editReply({ content: `‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î ticket ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà ${channel}` });
    console.log(`[TICKET] [${user.tag}] interaction.editReply done at ${new Date().toISOString()} (total: ${Date.now() - t0}ms)`);
  } catch (e) {}

  // fire-and-forget admin notify
  notifyAdmins({ guild, user, channel }).catch(e => console.error('[TICKET] admin notify error:', e));

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠ owner ‡∏ó‡∏≤‡∏á DM (fire-and-forget)
async function notifyAdmins({ guild, user, channel }) {
  const adminRoleId = config.adminRoleId;
  if (!adminRoleId) return;
  try {
    const adminRole = await guild.roles.fetch(adminRoleId);
    if (!adminRole) return;
    let adminMembers = null;
    try {
      adminMembers = await guild.members.fetch({ withRoles: [adminRoleId] });
    } catch (e) {
      console.error('[TICKET] fetch admin members error:', e);
    }
    const msg = `üì¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î ticket ‡πÉ‡∏´‡∏°‡πà\n‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î: ${user.tag} (${user.id})\n‡∏´‡πâ‡∏≠‡∏á: <#${channel.id}>\n‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`;
    if (!adminMembers || adminMembers.size === 0) {
      try {
        const owner = await guild.fetchOwner();
        await owner.send(msg);
        console.log(`[TICKET] DM owner success at ${new Date().toISOString()}`);
      } catch (e) {
        console.error('[TICKET] DM owner error:', e);
      }
    } else {
      const dmPromises = Array.from(adminMembers.values()).map(admin =>
        admin.send(msg)
          .then(() => ({ tag: admin.user.tag, status: 'fulfilled' }))
          .catch(e => ({ tag: admin.user.tag, status: 'rejected', reason: e }))
      );
      const results = await Promise.allSettled(dmPromises);
      results.forEach((result, i) => {
        const admin = Array.from(adminMembers.values())[i];
        if (result.status === 'fulfilled' && result.value.status === 'fulfilled') {
          console.log(`[TICKET] DM admin ${result.value.tag} success at ${new Date().toISOString()}`);
        } else {
          const reason = result.value?.reason || result.reason;
          console.error(`[TICKET] DM admin ${result.value?.tag || admin.user.tag} error:`, reason);
        }
      });
    }
  } catch (e) {
    console.error('[TICKET] fetch role or admin notify error:', e);
    // fallback ‡πÅ‡∏à‡πâ‡∏á owner
    try {
      const owner = await guild.fetchOwner();
      const msg = `üì¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î ticket ‡πÉ‡∏´‡∏°‡πà\n‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î: ${user.tag} (${user.id})\n‡∏´‡πâ‡∏≠‡∏á: <#${channel.id}>\n‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}`;
      await owner.send(msg);
      console.log(`[TICKET] DM owner (fallback) success at ${new Date().toISOString()}`);
    } catch (e2) {
      console.error('[TICKET] DM owner (fallback) error:', e2);
    }
  }
}

  const closeBtn = new ButtonBuilder()
    .setCustomId(`close-${channel.id}`)
    .setLabel('üîí ‡∏õ‡∏¥‡∏î Ticket')
    .setStyle(ButtonStyle.Danger);

  const threadBtn = new ButtonBuilder()
    .setCustomId(`thread-${customId}`)
    .setLabel('üìë ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ò‡∏£‡∏î')
    .setStyle(ButtonStyle.Primary);

  const cancelAutoBtn = new ButtonBuilder()
    .setCustomId(`cancelauto-${channel.id}`)
    .setLabel('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥')
    .setStyle(ButtonStyle.Secondary);

  const row = new ActionRowBuilder().addComponents(closeBtn, threadBtn, cancelAutoBtn);

  let description = '';
  let mentionRoles = '';
  if (customId === 'report') {
    // ‡∏î‡∏∂‡∏á role ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å config ‡πÅ‡∏•‡∏∞ extraRoles
    const extraRoles = require('../extraRoles');
    const adminMention = config.adminRoleId ? `<@&${config.adminRoleId}>` : '';
    const extraMentions = (Array.isArray(extraRoles) ? extraRoles : []).map(rid => `<@&${rid}>`).join(' ');
    mentionRoles = [adminMention, extraMentions].filter(Boolean).join(' ');
    description = `\n\n${mentionRoles}\n**‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô**\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤, ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå, ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)\n\nPlease describe the issue or incident you want to report clearly.\nExample: date/time, what happened, evidence (if any)`;
  }
  // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ auto close
  const autoCloseNote = '\n\n‚ö†Ô∏è **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏ß‡πâ Ticket ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\nNote: If there is no response or left open, the ticket will be auto-closed within 24 hours.';
  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô channel ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÑ‡∏°‡πà fetch channel ‡∏ã‡πâ‡∏≥
  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö fire-and-forget ‡πÑ‡∏°‡πà await promise ‡πÉ‡∏î‡πÜ
  const ticketMsgOptions = {
    content: `<@${user.id}> ‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î ticket ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: **${customId}**${description}${autoCloseNote}`,
    components: [row]
  };
  if (["support", "report", "donate"].includes(customId)) {
    ticketMsgOptions.flags = 64; // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  }
  channel.send(ticketMsgOptions).then(() => {
    console.log(`[TICKET] [${user.tag}] sent message to channel at ${new Date().toISOString()}`);
  }).catch(err => {
    console.error('[TICKET] send message error:', err);
    interaction.editReply({ content: '‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á ticket ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ: ' + err.message }).catch(e => console.error('[TICKET] interaction.editReply error:', e));
    if (!user.bot) user.send('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á ticket ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ').catch(e => console.error('[TICKET] DM user error:', e));
  });

  // DM ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ó‡πá‡∏Å‡∏´‡πâ‡∏≠‡∏á
  // ‡∏™‡πà‡∏á DM user ‡πÅ‡∏ö‡∏ö fire-and-forget ‡πÑ‡∏°‡πà await promise ‡πÉ‡∏î‡πÜ
  if (!user.bot) {
    user.send(`‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î ticket ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: **${customId}** ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ${guild.name}\n‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: <#${channel.id}>`)
      .then(() => {
        console.log(`[TICKET] [${user.tag}] DM success at ${new Date().toISOString()}`);
      })
      .catch(err => {
        console.warn(`[DM] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á ${user.tag} (${user.id}): ${err.message}`);
        channel.send(`‚ö†Ô∏è <@${user.id}> ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö DM ‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ`).catch(e => console.error('[TICKET] send warn to channel error:', e));
      });
  }

  // log
  saveLog({ action: 'open_ticket', user: user.tag, category: customId, channel: channel.name });
  const t1 = Date.now();
  // ‡πÅ‡∏à‡πâ‡∏á user ‡πÉ‡∏ô interaction ‡∏ß‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (editReply)
  try {
    await interaction.editReply({ content: `‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î ticket ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà ${channel}` });
    console.log(`[TICKET] [${user.tag}] interaction.editReply done at ${new Date().toISOString()} (total: ${t1 - t0}ms)`);
  } catch (e) {}
}

// ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ channel
const autoCloseDisabled = new Map();

module.exports = (client) => {
// export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å index.js
module.exports.createTicket = createTicket;
  client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;
    const { customId, user, guild, member } = interaction;
    try {
      // Log ‡∏ó‡∏∏‡∏Å interaction ‡∏õ‡∏∏‡πà‡∏°
      console.log(`[TICKET] interactionCreate: customId=${customId}, user=${user.tag}, id=${interaction.id}, replied=${interaction.replied}, deferred=${interaction.deferred}`);
      // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î ticket
      if (["support", "report", "donate", "other"].includes(customId)) {
        await createTicket({ interaction, customId, user, guild });
        return;
      }
      // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞ extraRoles)
      if (customId.startsWith('cancelauto-')) {
        const extraRoles = require('../extraRoles');
        const allowedRoles = [config.adminRoleId, ...(Array.isArray(extraRoles) ? extraRoles : [])];
        const isAllowed = member.roles.cache.some(r => allowedRoles.includes(r.id));
        if (!isAllowed) {
          if (interaction.channel) {
            await interaction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ', flags: 64 });
          }
          return;
        }
        const channelId = customId.split('-')[1];
        autoCloseDisabled.set(channelId, true);
        if (interaction.channel) {
          await interaction.reply({ content: '‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß', flags: 64 });
        }
        return;
      }
      // ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î ticket
      if (customId.startsWith('close-')) {
        try {
          await interaction.reply({ content: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î Ticket...', flags: 64 });
        } catch (e) { console.warn('[TICKET] close button reply error:', e); }
        const channel = interaction.guild.channels.cache.get(customId.split('-')[1]);
        if (channel) {
          try {
            await channel.send('‚ùå Ticket ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...');
            await sendTranscript(channel);
            setTimeout(() => channel.delete().catch(e => console.error('[TICKET] delete channel error:', e)), 5000);
          } catch (e) { console.error('[TICKET] close button channel error:', e); }
        }
        return;
      }
      // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ò‡∏£‡∏î
      if (customId.startsWith('thread-')) {
        try {
          const thread = await interaction.channel.threads.create({
            name: `discussion-${interaction.user.username}`,
            autoArchiveDuration: 1440,
            reason: 'User started a discussion thread'
          });
          await thread.send(`üì© ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ò‡∏£‡∏î‡πÇ‡∏î‡∏¢: <@${interaction.user.id}>`);
        } catch (e) { console.error('[TICKET] thread button error:', e); }
        return;
      }
    } catch (err) {
      console.error('[TICKET] interactionCreate error:', err);
      try { await interaction.reply({ content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + err.message, flags: 64 }); } catch {}
    }
  });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö inactivity ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  setInterval(async () => {
    const guild = await client.guilds.fetch(config.guildId);
    const channels = await guild.channels.fetch();
    const now = Date.now();
    const timeout = config.inactiveTimeoutHours * 60 * 60 * 1000;

    channels.forEach(async (channel) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ticket category ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô config
      if (channel.type !== ChannelType.GuildText || !Object.values(config.categoryId).includes(channel.parentId)) return;

      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°
      if (autoCloseDisabled.get(channel.id)) return;

      const messages = await channel.messages.fetch({ limit: 1 });
      const lastMsg = messages.first();
      if (lastMsg && now - lastMsg.createdTimestamp > timeout) {
        await channel.send('üïí ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î Ticket');
        await sendTranscript(channel);
        setTimeout(() => channel.delete(), 5000);
      }
    });
  }, 60 * 60 * 1000); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
};
